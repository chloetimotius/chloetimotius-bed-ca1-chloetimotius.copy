// ##############################################################
// REQUIRE MODULES
// ##############################################################
// Import the gamification model to interact with the database
const gamificationModel = require("../models/gamificationModel");

// ##############################################################
// DEFINE CONTROLLER FUNCTION FOR READ ALL CHARACTERS' ABILITIES
// ##############################################################
/*
 - Controller to retrieve all characters' abilities.
 - Fetches data from the database and returns a response with the list of abilities.
 */
module.exports.readAllCharactersAbilities = (req, res, next) => {
        const callback = (error, results, fields) => {
            if (error) {
                console.error("Error readAllAbility:", error);
                res.status(500).json(error);
            } else {
                res.status(200).json(results);
            }
        };

        //Call the model function to select all characters' ability
        gamificationModel.selectAll(callback);
    };

// ##############################################################################
// DEFINE CONTROLLER FUNCTION FOR READ FACTION LEADERBOARD RANKING BY SKILLPOINTS
// ##############################################################################
/*
 - Controller to fetch leaderboard ranking based on skillpoints.
 - Returns a sorted list of faction rankings with skillpoints in descending order.
 */
module.exports.readAllLeaderboardRanking = (req, res, next) => {
        const callback = (error, results, fields) => {
            if (error) {
                console.error("Error read Leaderboard Ranking by skillpoints:", error);
                res.status(500).json(error);
            } else {
                res.status(200).json(results);
            }
        };
    
        // Call the model function to get the leaderboard ranking by skillpoints
        gamificationModel.selectAllLeaderboardRanking(callback);
    };

// ##############################################################
// DEFINE CONTROLLER FUNCTION TO CREATE ABILITY
// ##############################################################
/*
 - Controller to create a new ability for a character.
 - Validates the request body for required fields and checks if the character name is available.
 - If valid, inserts the ability into the database and returns the created ability data.
 */
module.exports.createNewAbility = (req, res, next) => {
    // Check if required data is present
    if (req.body.user_id == undefined || req.body.character_name == undefined || req.body.ability_name == undefined || req.body.level == undefined) {
        return res.status(400).json({ 
            "message": "Missing required user_id/ character_name/ ability_name/ level."
        });
    }

    const { user_id, character_name, ability_name, level } = req.body;

    // Step 1: Check if the character_name is already taken by another user
    gamificationModel.checkCharacterNameTaken(character_name, user_id, (error, results) => {
        if (error) {
            console.error("Internal server error", error);
            return res.status(500).json({
                "message": "Internal server error",
                "error": error
            });
        }

        if (results.length > 0) {
            // Character name already taken
            return res.status(409).json({
                "message": "Character name already taken by another user."
            });
        }

        // Step 2: Prepare data for inserting a new ability
        const data = {
            user_id: req.body.user_id,
            character_name: req.body.character_name,
            ability_name: req.body.ability_name,
            level: req.body.level
        };

        // Callback to handle insert result
        const callback = (error, results, fields) => {
            if (error) {
                console.error("Internal server error", error);
                return res.status(500).json({ 
                    "message": "Internal server error", 
                    "error": error 
                });
            } else {
                // Return the created ability information
                return res.status(201).json({ 
                    "ability_id": results.insertId,  // The ID generated by MySQL
                    "user_id": data.user_id,
                    "character_name": data.character_name,
                    "ability_name": data.ability_name,
                    "level": data.level
                });
            }
        };

        // Step 3: Insert new ability into the database
        gamificationModel.insertAbility(data, callback);
    });
};


// ##############################################################
// DEFINE CONTROLLER FUNCTION FOR UPDATE ABILITY BY ID
// ##############################################################
/*
 - Controller to update an existing ability based on its ID.
 - Validates the required fields, performs the update, and returns appropriate status.
 */
module.exports.updateAbilityById = (req, res, next) => {
    // Check if required data is present
    if (req.body.ability_name == undefined || req.body.user_id == undefined || req.body.level == undefined) {
        return res.status(400).json({
            message: "Missing required ability_name/ level/ user_id." 
        });
    }

    // Prepare data for the update
    const data = {
        id: req.params.user_id, // Use user ID from URL
        ability_name: req.body.ability_name, 
        level: req.body.level, 
        user_id: req.body.user_id
    }

    //Callback to handle update result
    const callback = (error, results, fields) => {
        if (error) {
            console.error("Error updateAbilityById:", error);
            res.status(500).json(error);
        } else {
            if (results.affectedRows == 0) {
                res.status(404).json({
                    message: "Ability not found." 
                });
            } else {
                res.status(204).send(); // 204 No Content (successfully updated)
            }
        }
    }

    // Call the model function to update ability by ID
    gamificationModel.updateById(data, callback);
};

// ##############################################################
// DEFINE CONTROLLER FUNCTION FOR DELETE ABILITY BY USER ID
// ##############################################################
/*
 - Controller to delete an ability based on user ID.
 - Checks if the ability exists for the provided user ID and deletes it if found.
 */
module.exports.deleteAbilityById = (req, res, next) => {
    const user_id = req.params.user_id; // Use user ID from URL

    // Prepare data to pass into the model method
    const data = { user_id };

    // Callback to handle delete result
    const callback = (error, results, fields) => {
        if (error) {
            console.error("Error deleteAbilityById:", error);
            res.status(500).json(error);
        } else {
            if (results.affectedRows == 0) {
                res.status(404).json({
                    message: "Ability for this user not found."
                });
            } else {
                res.status(204).send(); // Successfully deleted
            }
        }
    };

    // Call the model function to delete ability by user_id
    gamificationModel.deleteById(data, callback);
};

// ##############################################################
// DEFINE CONTROLLER FUNCTION TO READ USER RECORDS BY CHALLENGE ID
// ##############################################################
/*
 - Controller to fetch character abilities for a given user ID.
 - Returns the abilities of the character based on the provided user ID.
 */
module.exports.readAbilityByUserId = (req, res, next) => {
    const user_id = req.params.user_id;  // Get user ID from URL

    // Callback to handle query result
    const callback = (error, results) => {
        if (error) {
            console.error("Error fetching character's ability by user_id.:", error);
            return res.status(500).json({ "message": "Error fetching character's ability by user_id." });
        }

        if (results.length === 0) {
            // If no user is found, return 404 status
            return res.status(404).json({ "message": "No user by this user_id is found." });
        }

        res.status(200).json(results); // Return the abilities for the given user_id
    };

    // Call the model function to read ability by user_id
    gamificationModel.selectByUserId(user_id, callback);
};



// ##############################################################
// DEFINE CONTROLLER FUNCTION TO UNLOCK FACTION ABILITY
// ##############################################################
/*
 - Controller to unlock faction ability if the faction has enough skillpoints.
 - Checks the faction's skillpoints and either unlocks the ability or notifies the faction of the required points.
 */
module.exports.unlockFactionAbility = (req, res, next) => {
    const { faction_id } = req.body;  // Get faction ID from the request body
  
    // Check if required data is present
    if (faction_id == undefined) {
      return res.status(400).json({ "message": "Faction ID is required." });
    }
 
    // Callback to handle the result of the query to fetch faction details
    const callback = (error, results) => {
      if (error) {
        console.error("Error retrieving faction details:", error);
        return res.status(500).json({
          "message": "Error unlocking faction abilities.",
          "error": error
        });
      }
  
      if (results[0].faction_name == null || results.length == 0) {
        return res.status(404).json({ "message": "Faction not found." });
      }
  
      const totalSkillpoints = results[0].total_skillpoints || 0;
      const factionName = results[0].faction_name;
  
      if (totalSkillpoints >= 500) {  // Ability unlock threshold
        return res.json({
          "message": `Faction ability unlocked for ${factionName}!`,
          "total_skillpoints before lvling up": totalSkillpoints,
          "total_skillpoints after lvling up": totalSkillpoints-500
        });
      } else {
        return res.json({
          "message": `Faction ${factionName} needs more skillpoints to unlock abilities.`,
          "total_skillpoints": totalSkillpoints,
          "total_skillpoints needed": 500-totalSkillpoints
        });
      }
    };  
  
    // Call the model function to get faction details and total skillpoints by faction_id
    gamificationModel.getTotalSkillpoints(faction_id, callback);
  };

// ##############################################################
// DEFINE CONTROLLER FUNCTION TO ADD CHARACTER TO FACTION
// ##############################################################
/*
 - Controller to add a character to a faction.
 - Validates the input data, checks if the character is already in the faction, and inserts the character into the faction.
 */
module.exports.addCharacterToFaction = (req, res, next) => {
    // Check if required data is present
    if (req.body.character_name == undefined || req.body.faction_name == undefined) {
        return res.status(400).json({
            "message": "Missing required character_name or faction_name"
        });
    }

    // Prepare data to be inserted
    const data = {
        character_name: req.body.character_name,
        faction_name: req.body.faction_name
    };

    // Step 1: Check if the character already exists in the given faction
    gamificationModel.checkCharacterInFaction(data.faction_name, data.character_name, (error, results) => {
        if (error) {
            console.error("Error checking if character is in faction", error);
            return res.status(500).json({
                "message": "Internal server error while checking character in faction",
                "error": error
            });
        }

        // If character is already assigned to the faction, return 409 Conflict
        if (results.length > 0) {
            return res.status(409).json({
                "message": `Character ${data.character_name} is already in faction ${data.faction_name}.`
            });
        }

        // Step 2: Retrieve the faction_id from the Faction table using faction_name
        gamificationModel.getFactionIdByName(data.faction_name, (error, results) => {
            if (error) {
                console.error("Error retrieving faction_id", error);
                return res.status(500).json({
                    "message": "Internal server error while retrieving faction_id",
                    "error": error
                });
            }

            if (results.length === 0) {
                return res.status(404).json({
                    "message": `Faction ${data.faction_name} does not exist.`
                });
            }

            const faction_id = results[0].faction_id;

            // Step 3: Add the character to the faction using the faction_id
            const callback = (error, results) => {
                if (error) {
                    console.error("Internal server error", error);
                    return res.status(500).json({
                        "message": "Internal server error",
                        "error": error
                    });
                }

                // If character is added successfully
                return res.status(201).json({
                    "message": `Character ${data.character_name} added to faction ${data.faction_name} successfully.`,
                    "character": {
                        "name": data.character_name,
                        "faction": data.faction_name,
                        "faction_id": faction_id
                    }
                });
            };

            // Call the model to execute the query and add the character to the faction
            gamificationModel.addCharacterToFaction(data.faction_name, data.character_name, callback);
        });
    });
};

/// ##############################################################
// DEFINE CONTROLLER FUNCTION TO READ CHARACTERS BY FACTION NAME
// ##############################################################
/*
 - Controller to fetch all characters associated with a given faction name.
 - It takes the `faction_name` from the URL parameters, queries the database, and returns a list of characters associated with the specified faction.
 - If no characters are found or the faction does not exist, it returns a 404 status with an appropriate message.
 */
module.exports.readCharacterByFactionName = (req, res, next) => {
    const faction_name = req.params.faction_name; // Get the faction_name from the URL

    // Callback to handle query results
    const callback = (error, results) => {
        if (error) {
            console.error("Error fetching characters:", error);
            return res.status(500).json({ "message": "Error fetching characters by faction name." });
        }

        if (results.length === 0) {
            // If no characters found, return 404
            return res.status(404).json({ "message": "Faction not found or no characters associated." });
        }

        // Return the list of characters as a response
        res.status(200).json(results);
    };

    // Call the model to get all characters associated with the faction name
    gamificationModel.selectByFactionName(faction_name, callback);
};
